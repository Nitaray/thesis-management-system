type Query {
	allUsers: [User!]!
	getUserById(id: String!): User

	allTheses: [Thesis!]!
	getThesisById(id: String!): Thesis

	allNamespaces: [Namespace!]
	allPods(namespace: String!): [Pod!]
	allDeployments(namespace: String!): [Deployment!]
	allStatefulSets(namespace: String!): [StatefulSet!]
	allServices(namespace: String!): [Service!]
	allConfigMaps(namespace: String!): [ConfigMap!]
	allSecrets(namespace: String!): [Secret!]
	allPersistentVolumes: [PersistentVolume!]
	allPersistentVolumeClaims(namespace: String!): [PersistentVolumeClaim!]

	getServiceDemo(namespace: String!):	String!
}

type Mutation {
	signup(user: UserInput!): AuthPayload!
	login(username: String!, password: String!): AuthPayload!
	logout:	Boolean!
	refreshJWT:	AuthPayload!

	createThesis(thesis: ThesisInput!): Thesis!
	updateThesis(id: String!, thesis: ThesisInput!): Thesis!
	deleteThesis(id: String!): Boolean!
	
	createNamespace(name: String!): Namespace
	createDeployment(namespace: String!, deployment: DeploymentInput!): Deployment
	createStatefulSet(namespace: String!, StatefulSet: StatefulSetInput!): StatefulSet
	createService(namespace: String!, service: ServiceInput!): Service
	createConfigMap(namespace: String!, configMap: ConfigMapInput!): ConfigMap
	createSecret(namespace: String!, secret: SecretInput!): Secret
	createPersistentVolume(persistentVolume: PersistentVolumeInput!): PersistentVolume
	createPersistentVolumeClaim(namespace: String!, persistentVolumeClaim: PersistentVolumeClaimInput!): PersistentVolumeClaim

	deleteNamespace(name: String!): Boolean
	deleteDeployment(namespace: String!, name: String!): Boolean
	deleteStatefulSet(namespace: String!, name: String!): Boolean
	deleteService(namespace: String!, name: String!): Boolean
	deleteConfigMap(namespace: String!, name: String!): Boolean
	deleteSecret(namespace: String!, name: String!): Boolean
	deletePersistentVolume(name: String!): Boolean
	deletePersistentVolumeClaim(namespace: String!, name: String!): Boolean
	deleteUser(id: String!): Boolean

	startDeployment(namespace: String!, name: String!): Boolean
	stopDeployment(namespace: String!, name: String!): Boolean
}

type Namespace {
	name: String!
	deployments: [Deployment!]
	statefulSets: [StatefulSet!]
	pods: [Pod!]
	configMaps: [ConfigMap!]
	secrets: [Secret!]
	services: [Service!]
	persistentVolumeClaims: [PersistentVolumeClaim!]
}

type Metadata {
	name: String!
	uid: String
	namespace: Namespace
}

input MetadataInput {
	name: String!
	uid: String
	namespace: String
}

type Deployment {
	meta: Metadata!
	replicas: Int!
	template: PodTemplate!
	yaml: String!
}

input DeploymentInput {
	name: String!
	replicas: Int
	template: PodTemplateInput!
}

type StatefulSet {
	meta: Metadata!
	replicas: Int!
	serviceName: String!
	template: PodTemplate!
	yaml: String!
}

input StatefulSetInput {
	name: String!
	replicas: Int!
	serviceName: String!
	template: PodTemplateInput!
}

type Pod {
	meta: Metadata!
	hostIP: String
	podIP: String
	status: String!
}

type PodTemplate {
	meta: Metadata
	containers: [Container!]!
	volumes: [Volume!]
}

input PodTemplateInput {
	meta: MetadataInput
	containers: [ContainerInput!]!
	volumes: [VolumeInput!]
}

type Volume {
	name: String!
	persistentVolumeClaim: String! 
}

input VolumeInput {
	name: String!
	persistentVolumeClaim: String! 
}

type Container {
	name: String!
	image: String!
	resources: ResourceRequirements
	ports: [ContainerPort!]
	env: [EnvVar!]
}

input ContainerInput {
	name: String!
	image: String!
	resources: ResourceRequirementsInput
	ports: [ContainerPortInput!]
	env: [EnvVarInput!]
}

type ContainerPort {
	containerPort: Int!
	name: String
	protocol: PortProtocol 
}

input ContainerPortInput {
	containerPort: Int!
	name: String
	protocol: PortProtocol 
}

enum PortProtocol {
	UDP
	TCP
	SCTP
}

type EnvVar {
	name: String!
	value: String
	valueFrom: EnvVarSrc
}

input EnvVarInput {
	name: String!
	value: String
	valueFrom: EnvVarSrcInput
}

type EnvVarSrc {
	configMapKeyRef: KeyRef
	secretKeyRef: KeyRef
}

input EnvVarSrcInput {
	configMapKeyRef: KeyRefInput
	secretKeyRef: KeyRefInput
}

type KeyRef {
	name: String!
	key: String!
}

input KeyRefInput {
	name: String!
	key: String!
}

type ConfigMap {
	meta: Metadata!
	data: [MapValue!]
	yaml: String!
}

input ConfigMapInput {
	name: String!
	data: [MapValueInput!]
}

type MapValue {
	key: String!
	value: String!
}

input MapValueInput {
	key: String!
	value: String!
}

type Secret {
	meta: Metadata!
	type: String!
	data: [MapValue!]
	yaml: String!
}

input SecretInput {
	name: String!
	type: String!
	data: [MapValueInput!]
}

type Service {
	meta: Metadata!
	dplName: String
	type: ServiceType!
	ports: [ServicePort!]
	yaml: String!
}

enum ServiceType {
	ExternalName,
	ClusterIP,
	NodePort,
	LoadBalancer,
}

input ServiceInput {
	name: String!
	dplName: String!
	type: ServiceType!
	ports: [ServicePortInput!]
}

type ServicePort {
	name: String
	protocol: PortProtocol!
	port: Int!
	targetPort: Int
	nodePort: Int
}

input ServicePortInput {
	name: String
	protocol: PortProtocol!
	port: Int!
	targetPort: Int 
	nodePort: Int
}

type PersistentVolume {
	meta: Metadata!
	accessMode: [VolumeAccessMode!]!
	volumeMode: String!
	capacity: String!
	reclaimPolicy: PersistentVolumeReclaimPolicy! 
}

input PersistentVolumeInput {
	meta: MetadataInput!
	accessMode: [VolumeAccessMode!]!
	volumeMode: String!
	capacity: String!
	reclaimPolicy: PersistentVolumeReclaimPolicy! 
}

enum PersistentVolumeReclaimPolicy {
	Retain,
	Delete
}

type PersistentVolumeClaim {
	meta: Metadata!
	volumeName: String!
	volumeMode: String!
	accessMode: [VolumeAccessMode!]!
	resources: ResourceRequirements
}

input PersistentVolumeClaimInput {
	meta: MetadataInput!
	volumeName: String!
	volumeMode: String!
	accessMode: [VolumeAccessMode!]!
	resources: ResourceRequirementsInput
}

enum VolumeAccessMode {
	ReadWriteOnce,
	ReadOnlyMany,
	ReadWriteMany,
	ReadWriteOncePod,
}

type ResourceRequirements {
	limits: Resource
	requests: Resource
}

input ResourceRequirementsInput {
	limits: ResourceInput
	requests: ResourceInput
}

type Resource {
	cpu: String
	memory: String
	storage: String
}

input ResourceInput {
	cpu: String
	memory: String
	storage: String
}

type Thesis {
	id: String!
	title: String!
	studentName: String!
	studentID: String!
	supervisorName: String!
	semester: String!
	summary: String
	report: String
	namespace: Namespace!
	user: User!
	tags: [ThesisTag!]
}

input ThesisInput {
	title: String!
	studentName: String!
	studentID: String!
	supervisorName: String!
	semester: String!
	summary: String
	report: String
	namespace: String!
	tags: [ThesisTagInput!]
}

type ThesisTag {
	name: String!
	thesis: [Thesis!]
}

input ThesisTagInput {
	name: String!
}

type User {
	id: String!
	name: String!
	username: String!
	thesis: Thesis
	role: Role
}

input UserInput {
	username:			String!
	password:			String!
	name:				String
}

type Role {
	id: String!
	name: String!
	users: [User!]
}

type AuthPayload {
	token: String!
	user: User!
}