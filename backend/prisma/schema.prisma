generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATASOURCE_URL")
}

model User {
  id           String    @id @default(cuid())
  name         String
  username     String    @unique
  password     String
  refreshToken String?   @unique @db.Uuid
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  role         Role      @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  roleId       String
  thesis       Thesis?
  active       Boolean   @default(true)

  @@map("users")
}

model Role {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  user      User[]

  @@map("roles")
}

model Namespace {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  thesis    Thesis?
  files     kubeFile[]

  @@map("namespaces")
}

model Thesis {
  id             String        @id @default(cuid())
  studentName    String
  studentID      String        @unique
  supervisorName String
  semester       String
  title          String
  summary        String?
  report         Bytes?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime?     @updatedAt
  namespace      Namespace     @relation(fields: [namespaceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  namespaceId    String        @unique
  user           User          @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId         String        @unique
  tags           TagOnThesis[]

  @@map("theses")
}

model ThesisTag {
  id          String        @id @default(cuid())
  name        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  thesisOfTag TagOnThesis[]

  @@map("thesis_tags")
}

model TagOnThesis {
  thesis    Thesis    @relation(fields: [thesisId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  thesisId  String
  tag       ThesisTag @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId     String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@id([thesisId, tagId])
  @@map("tag_on_thesis")
}

model kubeFile {
  id          String    @id @default(cuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  content     Json
  namespace   Namespace @relation(fields: [namespaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  namespaceId String

  @@map("kube_files")
}
